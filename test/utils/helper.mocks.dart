// Mocks generated by Mockito 5.2.0 from annotations
// in moviex/test/utils/helper.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:hive/hive.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:moviex/data/datasources/local_data_source.dart' as _i10;
import 'package:moviex/data/datasources/remote_data_source.dart' as _i9;
import 'package:moviex/data/models/film_model.dart' as _i3;
import 'package:moviex/domain/entities/film.dart' as _i7;
import 'package:moviex/domain/repositories/film_repository.dart' as _i6;
import 'package:moviex/utils/enum.dart' as _i8;
import 'package:moviex/utils/remote_state.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeRemoteState_0<T> extends _i1.Fake implements _i2.RemoteState<T> {}

class _FakeFilmModel_1 extends _i1.Fake implements _i3.FilmModel {}

/// A class which mocks [Box].
///
/// See the documentation for Mockito's code generation for more information.
class MockBox<E> extends _i1.Mock implements _i4.Box<E> {
  MockBox() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Iterable<E> get values =>
      (super.noSuchMethod(Invocation.getter(#values), returnValue: <E>[])
          as Iterable<E>);
  @override
  String get name =>
      (super.noSuchMethod(Invocation.getter(#name), returnValue: '') as String);
  @override
  bool get isOpen =>
      (super.noSuchMethod(Invocation.getter(#isOpen), returnValue: false)
          as bool);
  @override
  bool get lazy =>
      (super.noSuchMethod(Invocation.getter(#lazy), returnValue: false)
          as bool);
  @override
  Iterable<dynamic> get keys =>
      (super.noSuchMethod(Invocation.getter(#keys), returnValue: <dynamic>[])
          as Iterable<dynamic>);
  @override
  int get length =>
      (super.noSuchMethod(Invocation.getter(#length), returnValue: 0) as int);
  @override
  bool get isEmpty =>
      (super.noSuchMethod(Invocation.getter(#isEmpty), returnValue: false)
          as bool);
  @override
  bool get isNotEmpty =>
      (super.noSuchMethod(Invocation.getter(#isNotEmpty), returnValue: false)
          as bool);
  @override
  Iterable<E> valuesBetween({dynamic startKey, dynamic endKey}) =>
      (super.noSuchMethod(
          Invocation.method(
              #valuesBetween, [], {#startKey: startKey, #endKey: endKey}),
          returnValue: <E>[]) as Iterable<E>);
  @override
  E? getAt(int? index) =>
      (super.noSuchMethod(Invocation.method(#getAt, [index])) as E?);
  @override
  Map<dynamic, E> toMap() => (super.noSuchMethod(Invocation.method(#toMap, []),
      returnValue: <dynamic, E>{}) as Map<dynamic, E>);
  @override
  dynamic keyAt(int? index) =>
      super.noSuchMethod(Invocation.method(#keyAt, [index]));
  @override
  _i5.Stream<_i4.BoxEvent> watch({dynamic key}) => (super.noSuchMethod(
      Invocation.method(#watch, [], {#key: key}),
      returnValue: Stream<_i4.BoxEvent>.empty()) as _i5.Stream<_i4.BoxEvent>);
  @override
  bool containsKey(dynamic key) =>
      (super.noSuchMethod(Invocation.method(#containsKey, [key]),
          returnValue: false) as bool);
  @override
  _i5.Future<void> put(dynamic key, E? value) =>
      (super.noSuchMethod(Invocation.method(#put, [key, value]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> putAt(int? index, E? value) =>
      (super.noSuchMethod(Invocation.method(#putAt, [index, value]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> putAll(Map<dynamic, E>? entries) =>
      (super.noSuchMethod(Invocation.method(#putAll, [entries]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<int> add(E? value) =>
      (super.noSuchMethod(Invocation.method(#add, [value]),
          returnValue: Future<int>.value(0)) as _i5.Future<int>);
  @override
  _i5.Future<Iterable<int>> addAll(Iterable<E>? values) =>
      (super.noSuchMethod(Invocation.method(#addAll, [values]),
              returnValue: Future<Iterable<int>>.value(<int>[]))
          as _i5.Future<Iterable<int>>);
  @override
  _i5.Future<void> delete(dynamic key) =>
      (super.noSuchMethod(Invocation.method(#delete, [key]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> deleteAt(int? index) =>
      (super.noSuchMethod(Invocation.method(#deleteAt, [index]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> deleteAll(Iterable<dynamic>? keys) =>
      (super.noSuchMethod(Invocation.method(#deleteAll, [keys]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> compact() =>
      (super.noSuchMethod(Invocation.method(#compact, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<int> clear() => (super.noSuchMethod(Invocation.method(#clear, []),
      returnValue: Future<int>.value(0)) as _i5.Future<int>);
  @override
  _i5.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> deleteFromDisk() =>
      (super.noSuchMethod(Invocation.method(#deleteFromDisk, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> flush() => (super.noSuchMethod(Invocation.method(#flush, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
}

/// A class which mocks [FilmRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFilmRepository extends _i1.Mock implements _i6.FilmRepository {
  MockFilmRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.RemoteState<List<_i7.Film>>> getNowPlaying(
          _i8.FilmType? type) =>
      (super.noSuchMethod(Invocation.method(#getNowPlaying, [type]),
              returnValue: Future<_i2.RemoteState<List<_i7.Film>>>.value(
                  _FakeRemoteState_0<List<_i7.Film>>()))
          as _i5.Future<_i2.RemoteState<List<_i7.Film>>>);
  @override
  _i5.Future<_i2.RemoteState<List<_i7.Film>>> getPopular(_i8.FilmType? type) =>
      (super.noSuchMethod(Invocation.method(#getPopular, [type]),
              returnValue: Future<_i2.RemoteState<List<_i7.Film>>>.value(
                  _FakeRemoteState_0<List<_i7.Film>>()))
          as _i5.Future<_i2.RemoteState<List<_i7.Film>>>);
  @override
  _i5.Future<_i2.RemoteState<List<_i7.Film>>> getTopRated(_i8.FilmType? type) =>
      (super.noSuchMethod(Invocation.method(#getTopRated, [type]),
              returnValue: Future<_i2.RemoteState<List<_i7.Film>>>.value(
                  _FakeRemoteState_0<List<_i7.Film>>()))
          as _i5.Future<_i2.RemoteState<List<_i7.Film>>>);
  @override
  _i5.Future<_i2.RemoteState<_i7.Film>> getDetail(
          _i8.FilmType? type, int? id) =>
      (super.noSuchMethod(Invocation.method(#getDetail, [type, id]),
              returnValue: Future<_i2.RemoteState<_i7.Film>>.value(
                  _FakeRemoteState_0<_i7.Film>()))
          as _i5.Future<_i2.RemoteState<_i7.Film>>);
  @override
  _i5.Future<_i2.RemoteState<List<_i7.Film>>> getRecommendations(
          _i8.FilmType? type, int? id) =>
      (super.noSuchMethod(Invocation.method(#getRecommendations, [type, id]),
              returnValue: Future<_i2.RemoteState<List<_i7.Film>>>.value(
                  _FakeRemoteState_0<List<_i7.Film>>()))
          as _i5.Future<_i2.RemoteState<List<_i7.Film>>>);
  @override
  _i5.Future<_i2.RemoteState<List<_i7.Film>>> search(
          _i8.FilmType? type, String? query) =>
      (super.noSuchMethod(Invocation.method(#search, [type, query]),
              returnValue: Future<_i2.RemoteState<List<_i7.Film>>>.value(
                  _FakeRemoteState_0<List<_i7.Film>>()))
          as _i5.Future<_i2.RemoteState<List<_i7.Film>>>);
  @override
  _i5.Future<_i2.RemoteState<List<_i7.Film>>> getWatchlist(
          _i8.FilmType? type) =>
      (super.noSuchMethod(Invocation.method(#getWatchlist, [type]),
              returnValue: Future<_i2.RemoteState<List<_i7.Film>>>.value(
                  _FakeRemoteState_0<List<_i7.Film>>()))
          as _i5.Future<_i2.RemoteState<List<_i7.Film>>>);
  @override
  _i5.Future<_i2.RemoteState<bool>> addWatchlist(
          _i8.FilmType? type, _i7.Film? film) =>
      (super.noSuchMethod(Invocation.method(#addWatchlist, [type, film]),
              returnValue: Future<_i2.RemoteState<bool>>.value(
                  _FakeRemoteState_0<bool>()))
          as _i5.Future<_i2.RemoteState<bool>>);
  @override
  _i5.Future<_i2.RemoteState<bool>> getExistWatchlist(
          _i8.FilmType? type, int? id) =>
      (super.noSuchMethod(Invocation.method(#getExistWatchlist, [type, id]),
              returnValue: Future<_i2.RemoteState<bool>>.value(
                  _FakeRemoteState_0<bool>()))
          as _i5.Future<_i2.RemoteState<bool>>);
  @override
  _i5.Future<_i2.RemoteState<bool>> removeWatchlist(
          _i8.FilmType? type, int? id) =>
      (super.noSuchMethod(Invocation.method(#removeWatchlist, [type, id]),
              returnValue: Future<_i2.RemoteState<bool>>.value(
                  _FakeRemoteState_0<bool>()))
          as _i5.Future<_i2.RemoteState<bool>>);
}

/// A class which mocks [RemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteDataSource extends _i1.Mock implements _i9.RemoteDataSource {
  MockRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i3.FilmModel>> getNowPlaying(_i8.FilmType? type) =>
      (super.noSuchMethod(Invocation.method(#getNowPlaying, [type]),
              returnValue: Future<List<_i3.FilmModel>>.value(<_i3.FilmModel>[]))
          as _i5.Future<List<_i3.FilmModel>>);
  @override
  _i5.Future<List<_i3.FilmModel>> getPopular(_i8.FilmType? type) =>
      (super.noSuchMethod(Invocation.method(#getPopular, [type]),
              returnValue: Future<List<_i3.FilmModel>>.value(<_i3.FilmModel>[]))
          as _i5.Future<List<_i3.FilmModel>>);
  @override
  _i5.Future<List<_i3.FilmModel>> getTopRated(_i8.FilmType? type) =>
      (super.noSuchMethod(Invocation.method(#getTopRated, [type]),
              returnValue: Future<List<_i3.FilmModel>>.value(<_i3.FilmModel>[]))
          as _i5.Future<List<_i3.FilmModel>>);
  @override
  _i5.Future<_i3.FilmModel> getDetail(_i8.FilmType? type, int? id) =>
      (super.noSuchMethod(Invocation.method(#getDetail, [type, id]),
              returnValue: Future<_i3.FilmModel>.value(_FakeFilmModel_1()))
          as _i5.Future<_i3.FilmModel>);
  @override
  _i5.Future<List<_i3.FilmModel>> getRecommendations(
          _i8.FilmType? type, int? id) =>
      (super.noSuchMethod(Invocation.method(#getRecommendations, [type, id]),
              returnValue: Future<List<_i3.FilmModel>>.value(<_i3.FilmModel>[]))
          as _i5.Future<List<_i3.FilmModel>>);
  @override
  _i5.Future<List<_i3.FilmModel>> search(_i8.FilmType? type, String? query) =>
      (super.noSuchMethod(Invocation.method(#search, [type, query]),
              returnValue: Future<List<_i3.FilmModel>>.value(<_i3.FilmModel>[]))
          as _i5.Future<List<_i3.FilmModel>>);
}

/// A class which mocks [LocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalDataSource extends _i1.Mock implements _i10.LocalDataSource {
  MockLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i3.FilmModel>> getWatchlist(_i8.FilmType? type) =>
      (super.noSuchMethod(Invocation.method(#getWatchlist, [type]),
              returnValue: Future<List<_i3.FilmModel>>.value(<_i3.FilmModel>[]))
          as _i5.Future<List<_i3.FilmModel>>);
  @override
  _i5.Future<bool> addWatchlist(_i8.FilmType? type, _i3.FilmModel? film) =>
      (super.noSuchMethod(Invocation.method(#addWatchlist, [type, film]),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  _i5.Future<bool> getWatchlistExist(_i8.FilmType? type, int? id) =>
      (super.noSuchMethod(Invocation.method(#getWatchlistExist, [type, id]),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  _i5.Future<bool> removeWatchlist(_i8.FilmType? type, int? id) =>
      (super.noSuchMethod(Invocation.method(#removeWatchlist, [type, id]),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
}
